name: Build LINUX AMD64 TOR Binary

on:
  workflow_dispatch:

jobs:
  build-linux-amd64-tor:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout code
      uses: actions/checkout@main

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.x'
        check-latest: true

    - name: Install dependencies
      run: |
        sudo apt-get install -y curl gcc sed libevent-dev libevent-openssl-2.1-7 openssl libssl-dev zlib1g-dev autoconf file automake
        export PKG_CONFIG_PATH=/usr/lib/pkgconfig:$PKG_CONFIG_PATH

    - name: Create release folder
      run: sudo mkdir release

  build-v1.7.8:
    runs-on: ubuntu-20.04
    needs: build-linux-amd64-tor
    steps:
    - name: Build v1.7.8 binary
      run: |
        VERSION='v1.7.8'
        sudo env GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go install -ldflags "-X github.com/sagernet/sing-box/constant.Version=$VERSION" -v -tags ${{ vars.TAGS }} github.com/sagernet/sing-box/cmd/sing-box@$VERSION
        sudo mv -f /root/go/bin/sing-box ./release/sing-box-$VERSION
        sudo env GOOS=linux GOARCH=amd64 GOAMD64=v3 CGO_ENABLED=1 go install -ldflags "-X github.com/sagernet/sing-box/constant.Version=$VERSION" -v -tags ${{ vars.TAGS }} github.com/sagernet/sing-box/cmd/sing-box@$VERSION
        sudo mv -f /root/go/bin/sing-box ./release/sing-box-$VERSION-amd64v3

  build-v1.8.14:
    runs-on: ubuntu-20.04
    needs: build-linux-amd64-tor
    steps:
    - name: Build v1.8.14 binary
      run: |
        VERSION='v1.8.14'
        sudo env GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go install -ldflags "-X github.com/sagernet/sing-box/constant.Version=$VERSION" -v -tags ${{ vars.TAGS }} github.com/sagernet/sing-box/cmd/sing-box@$VERSION
        sudo mv -f /root/go/bin/sing-box ./release/sing-box-$VERSION
        sudo env GOOS=linux GOARCH=amd64 GOAMD64=v3 CGO_ENABLED=1 go install -ldflags "-X github.com/sagernet/sing-box/constant.Version=$VERSION" -v -tags ${{ vars.TAGS }} github.com/sagernet/sing-box/cmd/sing-box@$VERSION
        sudo mv -f /root/go/bin/sing-box ./release/sing-box-$VERSION-amd64v3

  build-v1.9.6:
    runs-on: ubuntu-20.04
    needs: build-linux-amd64-tor
    steps:
    - name: Build v1.9.6 binary
      run: |
        VERSION='v1.9.6'
        sudo env GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go install -ldflags "-X github.com/sagernet/sing-box/constant.Version=$VERSION" -v -tags ${{ vars.TAGS }} github.com/sagernet/sing-box/cmd/sing-box@$VERSION
        sudo mv -f /root/go/bin/sing-box ./release/sing-box-$VERSION
        sudo env GOOS=linux GOARCH=amd64 GOAMD64=v3 CGO_ENABLED=1 go install -ldflags "-X github.com/sagernet/sing-box/constant.Version=$VERSION" -v -tags ${{ vars.TAGS }} github.com/sagernet/sing-box/cmd/sing-box@$VERSION
        sudo mv -f /root/go/bin/sing-box ./release/sing-box-$VERSION-amd64v3

  push-files:
    runs-on: ubuntu-20.04
    needs: [build-v1.7.8, build-v1.8.14, build-v1.9.6]
    steps:
    - name: Push Files
      run: |
        sudo chown -R $USER:$USER ./release
        sudo chmod -R 777 ./release
        git config --global user.email "${{ secrets.GH_EMAIL }}"
        git config --global user.name "github-actions[bot]"
        sudo git add ./release/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ACTIONS_RUNNER_DEBUG: true
        ACTIONS_STEP_DEBUG: true

    - name: Create tag
      id: create_tag
      run: |
        TAG_NAME=$(date -u +"%Y%m%d%H%M%S")
        if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
          echo "Tag $TAG_NAME already exists, deleting it from remote."
          git push --delete origin "$TAG_NAME"
          while git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; do
            echo "Waiting for tag $TAG_NAME to be deleted..."
            sleep 5
          done
        fi
        git tag $TAG_NAME
        git push --force origin $TAG_NAME
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create release
      id: create_release
      run: |
        TAG_NAME=${{ steps.create_tag.outputs.TAG_NAME }}
        RELEASE_ID=$(gh release view "$TAG_NAME" --json id --jq '.id' || echo "null")
        if [ "$RELEASE_ID" != "null" ]; then
          echo "Release $TAG_NAME already exists, deleting it."
          gh release delete "$TAG_NAME" --yes
        fi
        gh release create "$TAG_NAME" --title "$TAG_NAME" --notes "Auto-generated release for $TAG_NAME" ./release/*
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
